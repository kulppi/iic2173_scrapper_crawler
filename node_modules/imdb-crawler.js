var mongojs = require('mongojs');
var db = mongojs('crawlerdb', ['crawlercollection']);
//var db = mongojs('grupo1:iic2173@arqui2.ing.puc.cl/crawlerdb', ['mycollection']);
var fs = require('node-fs'),
	url = require('url'),
	Crawler = require("simplecrawler").Crawler
	//de forma iterativa...
var minutes = 10, the_interval = minutes * 60 * 1000;
setInterval(function() {
	console.log("empezando denuevo");

	var myCrawlerIMDB = new Crawler("www.imdb.com")
	randomSeed = Math.floor((Math.random()*652429)+1);
	seedPath = "/search/title?at=0&count=100&start="+randomSeed+"&title_type=feature,tv_movie,short"
	myCrawlerIMDB.initialPath = seedPath
	myCrawlerIMDB.interval = 250;
	myCrawlerIMDB.maxConcurrency = 10;
	myCrawlerIMDB.timeout = 3000;

	myCrawlerIMDB.on("fetchstart",function(queueItem){
			console.log("Starting request for:",queueItem.url);
			console.log("IMDB: ", myCrawlerIMDB.queue.length);
		})

	myCrawlerIMDB.on("fetchcomplete",function(queueItem, responseBuffer, response) {
		console.log("I just received %s (%d bytes)",queueItem.url,responseBuffer.length);
		console.log("It was a resource of type %s",response.headers['content-type']);
		if(queueItem.url.indexOf("title/tt") != -1 && queueItem.url.indexOf("criticreviews") == -1 && queueItem.url.indexOf("showtimes") == -1)
		{
		
			db.crawlercollection.save({url:queueItem.url, html:responseBuffer, sitio:"IMDB"});
			//console.log(responseBuffer.toString());
							
		}
		// Do something with the data in responseBuffer
	});
	setTimeout((function() {
		console.log("guardando lista..");
		myCrawlerIMDB.queue.freeze("queueIMDB.json");
		myCrawlerIMDB.stop();
		console.log("borrando mycrawlerIMDB...");
		delete myCrawlerIMDB;
	}), 597000);
	myCrawlerIMDB.start();
	
}, the_interval);
	
	console.log("empezando del principio");

	var myCrawlerIMDB = new Crawler("www.imdb.com")
	randomSeed = Math.floor((Math.random()*652429)+1);
	seedPath = "/search/title?at=0&count=100&start="+randomSeed+"&title_type=feature,tv_movie,short"
	myCrawlerIMDB.initialPath = seedPath
	myCrawlerIMDB.interval = 250;
	myCrawlerIMDB.maxConcurrency = 10;
	myCrawlerIMDB.timeout = 3000;

	myCrawlerIMDB.on("fetchstart",function(queueItem){
			console.log("Starting request for:",queueItem.url);
			console.log("IMDB: ", myCrawlerIMDB.queue.length);
		})

	myCrawlerIMDB.on("fetchcomplete",function(queueItem, responseBuffer, response) {
		console.log("I just received %s (%d bytes)",queueItem.url,responseBuffer.length);
		console.log("It was a resource of type %s",response.headers['content-type']);
		if(queueItem.url.indexOf("title/tt") != -1 && queueItem.url.indexOf("criticreviews") == -1 && queueItem.url.indexOf("showtimes") == -1)
		{
		
			db.crawlercollection.save({url:queueItem.url, html:responseBuffer, sitio:"IMDB"});
			//console.log(responseBuffer.toString());
							
		}
		// Do something with the data in responseBuffer
	});
	setTimeout((function() {
		console.log("guardando lista..");
		myCrawlerIMDB.queue.freeze("queueIMDB.json");
		myCrawlerIMDB.stop();
		console.log("borrando mycrawlerIMDB...");
		delete myCrawlerIMDB;
	}), 597000);
	myCrawlerIMDB.start();


