var mongojs = require('mongojs');
var db = mongojs('crawlerdb', ['crawlercollection']);
//var db = mongojs('grupo1:iic2173@arqui2.ing.puc.cl/crawlerdb', ['mycollection']);
var fs = require('node-fs'),
	url = require('url'),
	Crawler = require("simplecrawler").Crawler
	//de forma iterativa...
var minutes = 20, the_interval = minutes * 60 * 1000;
setInterval(function() {
	console.log("empezando denuevo");

	var myCrawlerIMDB = new Crawler("www.imdb.com")
	myCrawlerIMDB.initialPath = "/search/title?title_type=feature,tv_movie,short";
	myCrawlerIMDB.interval = 500;
	myCrawlerIMDB.maxConcurrency = 5;
	myCrawlerIMDB.timeout = 1500;
	myCrawlerIMDB.listenerTTL = 1500;
	myCrawlerIMDB.queue.defrost("queueIMDB.json");

	myCrawlerIMDB.on("fetchstart",function(queueItem){
			console.log("Starting request for:",queueItem.url);
			console.log("IMDB: ", myCrawlerIMDB.queue.length);
			if(myCrawlerIMDB.queue.length > 10000)
			{
				myCrawlerIMDB.queue.splice(5000, 1000);
			}
		})

	myCrawlerIMDB.on("fetchcomplete",function(queueItem, responseBuffer, response) {
		console.log("I just received %s (%d bytes)",queueItem.url,responseBuffer.length);
		console.log("It was a resource of type %s",response.headers['content-type']);
		if(queueItem.url.indexOf("title/tt") != -1 && queueItem.url.indexOf("criticreviews") == -1 && queueItem.url.indexOf("showtimes") == -1)
		{
			var URLquery = db.crawlercollection.find({url: queueItem.url});
			URLquery.count(function (err, count) { 
				if(count==0){
					db.crawlercollection.save({url:queueItem.url, html:responseBuffer, sitio:"IMDB"});
					//console.log(responseBuffer.toString());
				}
			});
		}

		// Do something with the data in responseBuffer
	});
	timeOutMinutes = 29, the_setTimeout = timeOutMinutes * 60 * 1000;
	setTimeout((function() {
		console.log("guardando lista..");
		myCrawlerIMDB.queue.freeze("queueIMDB.json");
		myCrawlerIMDB.stop();
		console.log("borrando mycrawlerIMDB...");
		delete myCrawlerIMDB;
	}), the_setTimeout);
	myCrawlerIMDB.start();
	
}, the_interval);
	
	console.log("empezando del principio");

	var myCrawlerIMDB = new Crawler("www.imdb.com")
	myCrawlerIMDB.initialPath = "/search/title?title_type=feature,tv_movie,short";
	myCrawlerIMDB.interval = 500;
	myCrawlerIMDB.maxConcurrency = 5;
	myCrawlerIMDB.timeout = 1500;
	myCrawlerIMDB.listenerTTL = 1500;
	myCrawlerIMDB.queue.defrost("queueIMDB.json");

	myCrawlerIMDB.on("fetchstart",function(queueItem){
			console.log("Starting request for:",queueItem.url);
			console.log("IMDB: ", myCrawlerIMDB.queue.length);
			if(myCrawlerIMDB.queue.length > 10000)
			{
				myCrawlerIMDB.queue.splice(5000, 1000);
			}
		})

	myCrawlerIMDB.on("fetchcomplete",function(queueItem, responseBuffer, response) {
		console.log("I just received %s (%d bytes)",queueItem.url,responseBuffer.length);
		console.log("It was a resource of type %s",response.headers['content-type']);
		if(queueItem.url.indexOf("title/tt") != -1 && queueItem.url.indexOf("criticreviews") == -1 && queueItem.url.indexOf("showtimes") == -1)
		{
			var URLquery = db.crawlercollection.find({url: queueItem.url});
			URLquery.count(function (err, count) { 
				if(count==0){
					db.crawlercollection.save({url:queueItem.url, html:responseBuffer, sitio:"IMDB"});
					//console.log(responseBuffer.toString());
				}
			});
		}

		// Do something with the data in responseBuffer
	});
	console.log("ok");
	timeOutMinutes = 19, the_setTimeout = timeOutMinutes * 60 * 1000;
	setTimeout((function() {
		console.log("guardando lista...");
		myCrawlerIMDB.queue.freeze("queueIMDB.json");
		myCrawlerIMDB.stop();
		console.log("borrando mycrawlerIMDB...");
		delete myCrawlerIMDB;
	}), the_setTimeout);
	myCrawlerIMDB.start();


