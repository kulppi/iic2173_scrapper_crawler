var mongojs = require('mongojs');
var db = mongojs('crawlerdb', ['crawlercollection']);

var fs = require('node-fs'),
	url = require('url'),
	Crawler = require("simplecrawler").Crawler
	//de forma iterativa...

var minutes = 5, the_interval = minutes * 60 * 1000;
setInterval(function() {
	console.log("empezando denuevo");

	var myCrawlerIMDB = new Crawler("www.imdb.com")
	randomSeed = Math.floor((Math.random()*652429)+1);
	seedPath = "/search/title?at=0&count=100&start="+randomSeed+"&title_type=feature,tv_movie,short"
	myCrawlerIMDB.initialPath = seedPath
	myCrawlerIMDB.interval = 250;
	myCrawlerIMDB.maxConcurrency = 5;
	myCrawlerIMDB.timeout = 2000;
	myCrawlerIMDB.listenerTTL = 1500;
	
	myCrawlerIMDB.on("queueadd", function(queueItem){
	//Se borran los links q no sirven
		if(queueItem.url.indexOf("title/tt") == -1)
		{
			myCrawlerIMDB.queue.pop();
		}
	})
	
	myCrawlerIMDB.on("fetchstart",function(queueItem){
			//console.log("Starting request for:",queueItem.url);
			//console.log("IMDB: ", myCrawlerIMDB.queue.length);
				
		})

	myCrawlerIMDB.on("fetchcomplete",function(queueItem, responseBuffer, response) {
		//console.log("I just received %s (%d bytes)",queueItem.url,responseBuffer.length);
		//console.log("It was a resource of type %s",response.headers['content-type']);
		
		if(queueItem.url.indexOf("title/tt") != -1)
		{
			var url = queueItem.url.substr(0, queueItem.lastIndexOf("title/tt") + 16); 		
			var db = mongojs('crawlerdb', ['crawlercollection']);		
			db.crawlercollection.insert({url: url, html:responseBuffer, sitio:"IMDB"});
			db.close();
			console.log(url);
		}		
		// Do something with the data in responseBuffer
	});
	setTimeout((function() {
		console.log("guardando lista..");
		myCrawlerIMDB.stop();
		console.log("borrando mycrawlerIMDB...");
		delete myCrawlerIMDB;
	}), 295000);
	myCrawlerIMDB.start();
	
}, the_interval);
	
	console.log("empezando del principio");

	var myCrawlerIMDB = new Crawler("www.imdb.com")
	randomSeed = Math.floor((Math.random()*652429)+1);
	seedPath = "/search/title?at=0&count=100&start="+randomSeed+"&title_type=feature,tv_movie,short"
	myCrawlerIMDB.initialPath = seedPath
	myCrawlerIMDB.interval = 250;
	myCrawlerIMDB.maxConcurrency = 10;
	myCrawlerIMDB.timeout = 3000;

	myCrawlerIMDB.on("queueadd", function(queueItem){
		//En caso que la url no tenga el formato, se elimina de la cola
			
		if(queueItem.url.indexOf("title/tt") == -1)
		{			
			myCrawlerIMDB.queue.pop();
		}
		
	});
	
	myCrawlerIMDB.on("fetchstart",function(queueItem){
			//console.log("Starting request for:",queueItem.url);
			console.log("IMDB Cola:" ,myCrawlerIMDB.queue.length);
		})

	myCrawlerIMDB.on("fetchcomplete",function(queueItem, responseBuffer, response) {
		//console.log("I just received %s (%d bytes)",queueItem.url,responseBuffer.length);
		//console.log("It was a resource of type %s",response.headers['content-type']);
		if(queueItem.url.indexOf("title/tt") != -1)
		{
			var url = queueItem.url.substr(0, queueItem.url.lastIndexOf("title/tt") + 16);
			var db = mongojs('crawlerdb', ['crawlercollection']); 				
			db.crawlercollection.insert({url: url, html:responseBuffer, sitio:"IMDB"});
			db.close();
			console.log("Listo:", url);
		}
							
		// Do something with the data in responseBuffer
	});
	setTimeout((function() {
		console.log("guardando lista..");
		myCrawlerIMDB.stop();
		console.log("borrando mycrawlerIMDB...");
		delete myCrawlerIMDB;
	}), 295000);
	myCrawlerIMDB.start();


