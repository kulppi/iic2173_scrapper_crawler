var mongojs = require('mongojs');
var db = mongojs('crawlerdb', ['imdb']);

var fs = require('node-fs'),
        url = require('url'),
        Crawler = require("simplecrawler").Crawler;
        //de forma iterativa...

var minutes = 5, the_interval = minutes * 60 * 1000;
var interval = setInterval(function() {
        console.log("empezando denuevo");

        function startCrawler()
        {        

        var myCrawlerIMDB = new Crawler("www.imdb.com")
        randomSeed = Math.floor((Math.random()*9999)+1);
        seedPath = "/search/title?at=0&count=100&start="+randomSeed+"&title_type=feature,tv_movie,short"
        myCrawlerIMDB.initialPath = seedPath
        myCrawlerIMDB.interval = 250;
        myCrawlerIMDB.maxConcurrency = 5;
        myCrawlerIMDB.timeout = 2000;
        myCrawlerIMDB.listenerTTL = 1500;
        
        console.log(myCrawlerIMDB.initialPath);
        
        myCrawlerIMDB.on("complete",function(){
                //una vez que la lista se acabe
                console.log("lista terminada");
                //clearTimeout(timeOutInitial);
                killIMDB();        
                startCrawler();                
        });        
        
        myCrawlerIMDB.on("fetchstart",function(queueItem){
                        //console.log("Starting request for:",queueItem.url);
                        console.log("IMDB Cola:" ,myCrawlerIMDB.queue.length);
                });

        myCrawlerIMDB.on("fetchcomplete",function(queueItem, responseBuffer, response) {
                //console.log("I just received %s (%d bytes)",queueItem.url,responseBuffer.length);
                //console.log("It was a resource of type %s",response.headers['content-type']);
                if(queueItem.url.indexOf("title/tt") != -1)
                {
                        var index = queueItem.url.indexOf("title/tt");
                        var url = "http://www.imdb.com/"+queueItem.url.substr(index, 16);                               
                        db.imdb.insert({url: url, sitio:"IMDB"});
                        console.log("Listo:", url);
                }                                                
        });
        
        var timeOutInitial = setTimeout(restart, 290000);
		
        myCrawlerIMDB.start();
		
        function restart(){
        console.log("procesar queue..");
                myCrawlerIMDB.stop();
                var processed_urls = 0
                while(myCrawlerIMDB.queue.length > 0)
                {
                        url = myCrawlerIMDB.queue.pop().url;
                        if(url.indexOf("title/tt") != -1)
                        {
                                var index = url.indexOf("title/tt");
                                var processed_url = "http://www.imdb.com/"+url.substr(index, 16);
                                //var db = mongojs('crawlerdb', ['imdb']);                         
                                db.imdb.insert({url: processed_url, sitio:"IMDB"});
                                //db.close();
                                console.log("Listo:", processed_url);
                                processed_urls ++;                                
                        }
                }
                console.log("Procesado: ", processed_urls );
                console.log("borrando mycrawlerIMDB...");
                delete myCrawlerIMDB;        
        }
        function killIMDB() {
                myCrawlerIMDB.stop();
                console.log("borrando mycrawlerIMDB...");
                delete myCrawlerIMDB;
                }
        }        
        startCrawler();
        
}, the_interval);
        
        function startCrawler()
        {        
        console.log("empezando del principio");

        var myCrawlerIMDB = new Crawler("www.imdb.com")
        randomSeed = Math.floor((Math.random()*9999)+1);
        seedPath = "/search/title?at=0&count=100&start="+randomSeed+"&title_type=feature,tv_movie,short"
        myCrawlerIMDB.initialPath = seedPath
        myCrawlerIMDB.interval = 250;
        myCrawlerIMDB.maxConcurrency = 5;
        myCrawlerIMDB.timeout = 2000;
        myCrawlerIMDB.listenerTTL = 1500;
        
        console.log(myCrawlerIMDB.initialPath);
        
        myCrawlerIMDB.on("complete",function(){
                //una vez que la lista se acabe
                console.log("lista terminada");
                //clearTimeout(timeOutInitial);
                killIMDB();        
                startCrawler();                
        })        
        
        myCrawlerIMDB.on("fetchstart",function(queueItem){
                        //console.log("Starting request for:",queueItem.url);
                        console.log("IMDB Cola:" ,myCrawlerIMDB.queue.length);
                })

        myCrawlerIMDB.on("fetchcomplete",function(queueItem, responseBuffer, response) {
                //console.log("I just received %s (%d bytes)",queueItem.url,responseBuffer.length);
                //console.log("It was a resource of type %s",response.headers['content-type']);
                if(queueItem.url.indexOf("title/tt") != -1)
                {
                        var index = queueItem.url.indexOf("title/tt");
                        var url = "http://www.imdb.com/"+queueItem.url.substr(index, 16);
                        //var db = mongojs('crawlerdb', ['imdb']);
                        db.imdb.insert({'url': url, 'sitio':"IMDB"});
                        //db.close();
                        console.log("Listo:", url);
                }                                                
        });
        /*myCrawlerIMDB.on("queueadd", function(queueItem){
                //Ãºnicamente guardo links de peliculas
                if(queueItem.url.indexOf("title/tt") == -1)
                {
                        myCrawlerIMDB.queue.pop();
                }
        })*/
        
        var timeOutInitial = setTimeout(restart, 290000);
        myCrawlerIMDB.start();
        function restart(){
        console.log("procesar queue..");
                myCrawlerIMDB.stop();
                var processed_urls = 0;
                var largo = myCrawlerIMDB.queue.length;
                while(myCrawlerIMDB.queue.length > 0)
                {
                        url = myCrawlerIMDB.queue.pop().url;
                        if(url.indexOf("title/tt") != -1)
                        {
                                var index = url.indexOf("title/tt");
                                var processed_url = "http://www.imdb.com/"+url.substr(index, 16);                                                                
                                //var db = mongojs('crawlerdb', ['imdb']);
                                db.imdb.insert({'url': processed_url, 'sitio':"IMDB"});
                                //db.close();                                
                                console.log("Listo:", processed_url);
                                processed_urls ++;
                                //db.close();                                
                                //sleep(1000);
                        }
                }
                console.log("Cola: ", largo );
                console.log("Procesado: ", processed_urls );
                console.log("borrando mycrawlerIMDB...");
                delete myCrawlerIMDB;        
        }
        function killIMDB() {
                myCrawlerIMDB.stop();
                console.log("borrando mycrawlerIMDB...");
                delete myCrawlerIMDB;
                }
        function sleep(milliSeconds){
                var startTime = new Date().getTime(); // get the current time
                while (new Date().getTime() < startTime + milliSeconds); // hog cpu
                }
        }        
        startCrawler();
